import random
import time

# nejauša skaitļu saraksta ģenerēšana
def generate_random_list(size):
    return [random.randint(1, 100) for _ in range(size)]

# burbuļu šķirošanas algoritms
def bubble_sort(arr):
    n = len(arr)
    for i in range(n - 1):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

# Kārtošanas algoritms ar ielīmēm
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

# izvēles algoritms
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

# ātrās kārtošanas algoritms
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# Kārtošanas izpildes laika mērīšana
def measure_sorting_time(sort_func, arr):
    start_time = time.time()
    sort_func(arr)
    end_time = time.time()
    return end_time - start_time

# nejauša skaitļu saraksta ģenerēšana un kārtošana
random_list = generate_random_list(10000)

# burbuļu kārtošana
bubble_sorted_list = random_list.copy()
bubble_sort_time = measure_sorting_time(bubble_sort, bubble_sorted_list)
print("Burbuļa kārtošanas laiks:", bubble_sort_time)

# kārtošana pēc ievietošanas
insertion_sorted_list = random_list.copy()
insertion_sort_time = measure_sorting_time(insertion_sort, insertion_sorted_list)
print("Ievietošanas kārtošanas laiks:", insertion_sort_time)

# Kārtošana pēc izvēles
selection_sorted_list = random_list.copy()
selection_sort_time = measure_sorting_time(selection_sort, selection_sorted_list)
print("Atlases kārtošanas laiks:", selection_sort_time)

# Ātrā kārtošana
quick_sorted_list = random_list.copy()
quick_sort_time = measure_sorting_time(quick_sort, quick_sorted_list)
print("Ātrās kārtošanas laiks:", quick_sort_time)
